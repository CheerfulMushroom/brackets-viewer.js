/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__webpack_require__(/*! ./style.scss */ \"./src/style.scss\");\n\nclass BracketsViewer {\n  constructor() {\n    this.teamRefsDOM = {};\n  }\n\n  render(data) {\n    const root = $('.tournament');\n\n    if (root.length === 0) {\n      throw Error('Root not found. You must have a root element with class \".tournament\"');\n    }\n\n    switch (data.stage.type) {\n      case 'double_elimination':\n        this.renderDoubleElimination(root, data);\n        break;\n\n      default:\n        throw Error(`Unknown bracket type: ${data.stage.type}`);\n    }\n  }\n\n  renderDoubleElimination(root, data) {\n    data.participants.map(participant => this.teamRefsDOM[participant.id] = []);\n    const matches = splitBy(data.matches, 'group_id');\n    this.participants = data.participants;\n    root.append($('<h1>').text(data.stage.name));\n    this.renderWinnerBracket(root, data.rounds, matches[0]);\n    this.renderLoserBracket(root, data.rounds, matches[1]);\n    this.renderGrandFinal(matches[2][0]);\n  }\n  /**\r\n   * Renders the winner bracket (WB) and returns all the losers and the final winner.\r\n   */\n\n\n  renderWinnerBracket(root, rounds, matches) {\n    const winnerBracket = $('<div class=\"winner bracket\">');\n    const splitted = splitBy(matches, \"round_id\");\n\n    for (const roundMatches of splitted) {\n      const round = rounds.find(round => round.id === roundMatches[0].round_id);\n      if (!round) throw Error('Round not found.');\n      const roundDOM = $('<div class=\"round\">').append($('<h2>').text(`WB Round ${round.number}`));\n\n      for (const match of roundMatches) {\n        roundDOM.append(this.renderMatch(match, {\n          connectPrevious: round.number > 1,\n          connectNext: true\n        }));\n      }\n\n      winnerBracket.append(roundDOM);\n    }\n\n    root.append(winnerBracket);\n  }\n\n  renderLoserBracket(root, rounds, matches) {\n    const loserBracket = $('<div class=\"loser bracket\">');\n    const splitted = splitBy(matches, \"round_id\");\n\n    for (const roundMatches of splitted) {\n      const round = rounds.find(round => round.id === roundMatches[0].round_id);\n      if (!round) throw Error('Round not found.');\n      const roundDOM = $('<div class=\"round\">').append($('<h2>').text(`LB Round ${round.number}`));\n\n      for (const match of roundMatches) {\n        roundDOM.append(this.renderMatch(match, {\n          connectPrevious: round.number > 1,\n          connectNext: round.number < splitted.length\n        }));\n      }\n\n      loserBracket.append(roundDOM);\n    }\n\n    root.append(loserBracket);\n  }\n\n  renderGrandFinal(match) {\n    const matchDOM = this.renderMatch(match, {\n      connectPrevious: true,\n      connectNext: false\n    });\n    const roundDOM = $('<div class=\"round\">').append($('<h2>').text(\"Grand Final\"));\n    roundDOM.append(matchDOM);\n    $('.winner.bracket').append(roundDOM);\n  }\n\n  renderMatch(results, connection) {\n    const team1 = this.renderTeam(results.opponent1);\n    const team2 = this.renderTeam(results.opponent2);\n    const teams = $('<div class=\"teams\">').append(team1).append(team2);\n    const match = $('<div class=\"match\">').append(teams);\n\n    if (connection && connection.connectPrevious) {\n      teams.addClass('connect-previous');\n    }\n\n    if (connection && connection.connectNext) {\n      match.addClass('connect-next');\n    }\n\n    return match;\n  }\n\n  renderTeam(team) {\n    const teamDOM = $(`<div class=\"team\">`);\n    const nameDOM = $('<div class=\"name\">');\n    const scoreDOM = $('<div class=\"score\">');\n\n    if (team === null) {\n      nameDOM.text('BYE');\n    } else {\n      const participant = this.participants.find(participant => participant.id === team.id);\n      nameDOM.text(participant === undefined ? 'TBD' : participant.name);\n      scoreDOM.text(team.score || '');\n\n      if (team.result && team.result === 'win') {\n        nameDOM.addClass('win');\n        scoreDOM.addClass('win');\n      }\n\n      if (team.result && team.result === 'loss') {\n        nameDOM.addClass('loss');\n        scoreDOM.addClass('loss');\n      }\n    }\n\n    teamDOM.append(nameDOM).append(scoreDOM);\n\n    if (team && team.id !== null) {\n      const id = team.id;\n      this.teamRefsDOM[id].push(teamDOM.get(0));\n      teamDOM.hover(() => $(this.teamRefsDOM[id]).addClass('hover'), () => $(this.teamRefsDOM[id]).removeClass('hover'));\n    }\n\n    return teamDOM;\n  }\n\n}\n\nfunction splitBy(array, key) {\n  const obj = Object();\n\n  for (const value of array) {\n    if (!obj[value[key]]) obj[value[key]] = [];\n    obj[value[key]].push(value);\n  }\n\n  return Object.values(obj);\n}\n\nwindow.bracketsViewer = new BracketsViewer();\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ }),

/***/ "./src/style.scss":
/*!************************!*\
  !*** ./src/style.scss ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/style.scss?");

/***/ })

/******/ });