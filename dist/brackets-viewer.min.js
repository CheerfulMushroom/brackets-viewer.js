(()=>{"use strict";var e={953:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.setupConnection=n.getFinalConnection=n.getBracketConnection=n.addTeamOrigin=n.setupLoss=n.setupWin=n.setupHint=n.createRankingHeaders=n.createCell=n.createRow=n.createTable=n.createResultContainer=n.createNameContainer=n.createParticipantContainer=n.createOpponentsContainer=n.createMatchLabel=n.createMatchContainer=n.createRoundContainer=n.createGroupContainer=n.createBracketContainer=n.createRoundRobinContainer=n.createTitle=void 0;const r=t(547),o=t(894);n.createTitle=function(e){const n=document.createElement("h1");return n.innerText=e,n},n.createRoundRobinContainer=function(){const e=document.createElement("div");return e.classList.add("round-robin"),e},n.createBracketContainer=function(e){const n=document.createElement("section");return n.classList.add("bracket"),n.setAttribute("data-group-id",e.toString()),n},n.createGroupContainer=function(e,n){const t=document.createElement("h2");t.innerText=n;const r=document.createElement("section");return r.classList.add("group"),r.setAttribute("data-group-id",e.toString()),r.append(t),r},n.createRoundContainer=function(e,n){const t=document.createElement("h3");t.innerText=n;const r=document.createElement("article");return r.classList.add("round"),r.setAttribute("data-round-id",e.toString()),r.append(t),r},n.createMatchContainer=function(e){const n=document.createElement("div");return n.classList.add("match"),n.setAttribute("data-match-id",e.toString()),n},n.createMatchLabel=function(e,n){const t=document.createElement("span");return t.innerText=e,t.title=n,t},n.createOpponentsContainer=function(){const e=document.createElement("div");return e.classList.add("opponents"),e},n.createParticipantContainer=function(e){const n=document.createElement("div");return n.classList.add("participant"),null!==e&&n.setAttribute("data-participant-id",e.toString()),n},n.createNameContainer=function(){const e=document.createElement("div");return e.classList.add("name"),e},n.createResultContainer=function(){const e=document.createElement("div");return e.classList.add("result"),e},n.createTable=function(){return document.createElement("table")},n.createRow=function(){return document.createElement("tr")},n.createCell=function(e){const n=document.createElement("td");return n.innerText=String(e),n},n.createRankingHeaders=function(e){const n=document.createElement("tr"),t=e[0];for(const e in t){const t=r.rankingHeader(e),o=document.createElement("th");o.innerText=t.text,o.setAttribute("title",t.tooltip),n.append(o)}return n},n.setupHint=function(e,n){e.classList.add("hint"),e.innerText=n},n.setupWin=function(e,n,t){t.result&&"win"===t.result&&(e.classList.add("win"),void 0===t.score&&(n.innerText=o.abbreviations.win))},n.setupLoss=function(e,n,t){(t.result&&"loss"===t.result||t.forfeit)&&(e.classList.add("loss"),t.forfeit?n.innerText=o.abbreviations.forfeit:void 0===t.score&&(n.innerText=o.abbreviations.loss))},n.addTeamOrigin=function(e,n,t){const r=document.createElement("span");"before"===t?(r.innerText=`${n} `,e.prepend(r)):"after"===t&&(r.innerText=` (${n})`,e.append(r))},n.getBracketConnection=function(e,n,t,r){return"loser-bracket"===t?{connectPrevious:e>1&&(e%2==1?"square":"straight"),connectNext:e<n&&(e%2==0?"square":"straight")}:{connectPrevious:e>1&&"square",connectNext:e<n?"square":!!r&&"straight"}},n.getFinalConnection=function(e,n,t){return{connectPrevious:"grand_final"===e&&1===n&&"straight",connectNext:2===t&&1===n&&"straight"}},n.setupConnection=function(e,n,t){t.connectPrevious&&e.classList.add("connect-previous"),t.connectNext&&n.classList.add("connect-next"),"straight"===t.connectPrevious&&e.classList.add("straight"),"straight"===t.connectNext&&n.classList.add("straight")}},547:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.getRanking=n.rankingHeader=n.isMajorRound=n.getOriginAbbreviation=n.findRoot=n.splitBy=void 0;const r=t(894);function o(e,n,t,r){if(!t||null===t.id)return;const o=e[t.id]||{rank:0,id:0,played:0,wins:0,draws:0,losses:0,forfeits:0,scoreFor:0,scoreAgainst:0,scoreDifference:0,points:0};o.id=t.id,o.played++,"win"===t.result&&o.wins++,"draw"===t.result&&o.draws++,"loss"===t.result&&o.losses++,t.forfeit&&o.forfeits++,o.scoreFor+=t.score||0,o.scoreAgainst+=r&&r.score||0,o.scoreDifference=o.scoreFor-o.scoreAgainst,o.points=n(o),e[t.id]=o}n.splitBy=function(e,n){const t=Object();for(const r of e)t[r[n]]||(t[r[n]]=[]),t[r[n]].push(r);return Object.values(t)},n.findRoot=function(e){const n=document.querySelectorAll(e||".bracket-viewer");if(0===n.length)throw Error("Root not found. You must have at least one root element.");if(n.length>1)throw Error("Multiple possible roots were found. Please use `config.selector` to choose a specific root.");const t=n[0];if(!t.classList.contains("bracket-viewer"))throw Error("The selected root must have a `.bracket-viewer` class.");return t},n.getOriginAbbreviation=function(e,n,t){return n&&"lower-bracket"===e&&1===t?r.abbreviations.seed:"lower-bracket"===e||"final-group"===e?r.abbreviations.position:r.abbreviations.seed},n.isMajorRound=function(e){return 1===e||e%2==0},n.rankingHeader=function(e){return r.headers[e]},n.getRanking=function(e,n){n=n||(e=>3*e.wins+1*e.draws+0*e.losses);const t={};for(const r of e)o(t,n,r.opponent1,r.opponent2),o(t,n,r.opponent2,r.opponent1);return function(e){const n=Object.values(e).sort(((e,n)=>n.points-e.points)),t={value:0,lastPoints:-1};for(const e of n)e.rank=t.lastPoints!==e.points?++t.value:t.value,t.lastPoints=e.points;return n}(t)}},894:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.headers=n.abbreviations=n.getLoserBracketRoundName=n.getWinnerBracketRoundName=n.getRoundName=n.getGroupName=n.getGrandFinalName=n.getMatchStatus=n.getFinalOriginHint=n.getFinalMatchLabel=n.getMatchLabel=n.getOriginHint=void 0;const r=t(789),o=t(547);function i(e,n){return 1===n?"Grand Final":`GF Round ${e}`}n.getOriginHint=function(e,n,t,r){if(1===e){if("single-bracket"===r)return e=>`Seed ${e}`;if("winner-bracket"===r)return e=>`Seed ${e}`;if("loser-bracket"===r&&t)return e=>`Seed ${e}`}if(o.isMajorRound(e)&&"loser-bracket"===r){if(e===n-2)return e=>`Loser of WB Semi ${e}`;if(e===n)return()=>"Loser of WB Final";const r=Math.ceil((e+1)/2);return t?e=>`Loser of WB ${r-1}.${e}`:e=>`Loser of WB ${r}.${e}`}},n.getMatchLabel=function(e,n,t,r){const o="winner-bracket"===r?"WB":"loser-bracket"===r?"LB":"M",i=n===t-1,a=n===t;if("single-bracket"===r){if(i)return`Semi ${e}`;if(a)return"Final"}return i?`${o} Semi ${e}`:a?`${o} Final`:`${o} ${n}.${e}`},n.getFinalMatchLabel=function(e,n,t){return"consolation_final"===e?"Consolation Final":i(n,t)},n.getFinalOriginHint=function(e,n){return"consolation_final"===e?e=>`Loser of Semi ${e}`:1===n?()=>"Winner of LB Final":void 0},n.getMatchStatus=function(e){switch(e){case r.Status.Locked:return"Locked";case r.Status.Waiting:return"Waiting";case r.Status.Ready:return"Ready";case r.Status.Running:return"Running";case r.Status.Completed:return"Completed";case r.Status.Archived:return"Archived"}},n.getGrandFinalName=i,n.getGroupName=function(e){return`Group ${e}`},n.getRoundName=function(e,n){return e===n?"Final Round":`Round ${e}`},n.getWinnerBracketRoundName=function(e,n){return e===n?"WB Final Round":`WB Round ${e}`},n.getLoserBracketRoundName=function(e,n){return e===n?"LB Final Round":`LB Round ${e}`},n.abbreviations={win:"W",loss:"L",forfeit:"F",position:"P",seed:"#"},n.headers={rank:{text:"#",tooltip:"Rank"},id:{text:"Name",tooltip:"Name"},played:{text:"P",tooltip:"Played"},wins:{text:n.abbreviations.win,tooltip:"Wins"},draws:{text:"D",tooltip:"Draws"},losses:{text:n.abbreviations.loss,tooltip:"Losses"},forfeits:{text:n.abbreviations.forfeit,tooltip:"Forfeits"},scoreFor:{text:"SF",tooltip:"Score For"},scoreAgainst:{text:"SA",tooltip:"Score Against"},scoreDifference:{text:"+/-",tooltip:"Score Difference"},points:{text:"Pts",tooltip:"Points"}}},153:function(e,n,t){var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),o=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return o(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.BracketsViewer=void 0,t(651);const a=t(547),c=i(t(953)),s=i(t(894));class d{constructor(){this.teamRefsDOM={}}render(e,n){const t=a.findRoot(null==n?void 0:n.selector);this.config={participantOriginPlacement:n&&n.participantOriginPlacement||"before",showSlotsOrigin:!n||void 0===n.showSlotsOrigin||n.showSlotsOrigin,showLowerBracketSlotsOrigin:!n||void 0===n.showLowerBracketSlotsOrigin||n.showLowerBracketSlotsOrigin,highlightParticipantOnHover:!n||void 0===n.highlightParticipantOnHover||n.highlightParticipantOnHover},this.participants=e.participants,e.participants.forEach((e=>this.teamRefsDOM[e.id]=[])),e.stages.forEach((n=>this.renderStage(t,{...e,stages:[n],matches:e.matches.filter((e=>e.stage_id===n.id))})))}renderStage(e,n){const t=n.stages[0],r=a.splitBy(n.matches,"group_id");switch(this.skipFirstRound=t.settings.skipFirstRound||!1,t.type){case"round_robin":this.renderRoundRobin(e,t.name,r);break;case"single_elimination":case"double_elimination":this.renderElimination(e,t.name,t.type,r);break;default:throw Error(`Unknown bracket type: ${t.type}`)}}renderRoundRobin(e,n,t){const r=c.createRoundRobinContainer();let o=1;for(const e of t){const n=e[0].group_id,t=c.createGroupContainer(n,s.getGroupName(o++)),i=a.splitBy(e,"round_id");let d=1;for(const e of i){const n=e[0].round_id,r=c.createRoundContainer(n,s.getRoundName(d++,0));for(const n of e)r.append(this.createMatch(n));t.append(r)}t.append(this.createRanking(e)),r.append(t)}e.append(c.createTitle(n),r)}renderElimination(e,n,t,r){e.append(c.createTitle(n)),"single_elimination"===t?this.renderSingleElimination(e,r):this.renderDoubleElimination(e,r)}renderSingleElimination(e,n){const t=void 0!==n[1];this.renderBracket(e,a.splitBy(n[0],"round_id"),s.getRoundName,"single-bracket"),t&&this.renderFinal("consolation_final",n[1])}renderDoubleElimination(e,n){const t=void 0!==n[1],r=void 0!==n[2];this.renderBracket(e,a.splitBy(n[0],"round_id"),s.getWinnerBracketRoundName,"winner-bracket",r),t&&this.renderBracket(e,a.splitBy(n[1],"round_id"),s.getLoserBracketRoundName,"loser-bracket"),r&&this.renderFinal("grand_final",n[2])}renderBracket(e,n,t,r,o){const i=n[0][0].group_id,a=n.length,s=c.createBracketContainer(i);let d=1;for(const e of n){const n=e[0].round_id,i=c.createRoundContainer(n,t(d,a));for(const n of e)i.append(this.createBracketMatch(d,a,n,r,o));s.append(i),d++}e.append(s)}renderFinal(e,n){const t=document.querySelector(".bracket");if(!t)throw Error("Upper bracket not found.");const r=n[0].opponent1,o=null===(null==r?void 0:r.id)||"win"===(null==r?void 0:r.result)?1:2,i=n.slice(0,o),a=n.length;for(let n=0;n<i.length;n++){const r=n+1,o=c.createRoundContainer(i[n].round_id,s.getFinalMatchLabel(e,r,a));o.append(this.createFinalMatch(e,i,r,a)),t.append(o)}}createRanking(e){const n=c.createTable(),t=a.getRanking(e);n.append(c.createRankingHeaders(t));for(const e of t)n.append(this.createRankingRow(e));return n}createRankingRow(e){const n=c.createRow();for(const t in e){const r=e[t];if("id"===t){const e=this.participants.find((e=>e.id===r));if(void 0!==e){const t=c.createCell(e.name);this.setupMouseHover(e.id,t),n.append(t);continue}}n.append(c.createCell(r))}return n}createBracketMatch(e,n,t,r,o){const i=c.getBracketConnection(e,n,r,o),a=s.getMatchLabel(t.number,e,n,r),d=s.getOriginHint(e,n,this.skipFirstRound,r);return this.createMatch(t,r,i,a,d,e)}createFinalMatch(e,n,t,r){const o=t-1,i=c.getFinalConnection(e,t,n.length),a=s.getFinalMatchLabel(e,t,r),d=s.getFinalOriginHint(e,t);return this.createMatch(n[o],"final-group",i,a,d)}createMatch(e,n,t,r,o,i){const a=c.createMatchContainer(e.id),d=c.createOpponentsContainer(),A=this.createTeam(e.opponent1,o,n,i),l=this.createTeam(e.opponent2,o,n,i);return r&&d.append(c.createMatchLabel(r,s.getMatchStatus(e.status))),d.append(A,l),a.append(d),t?(c.setupConnection(d,a,t),a):a}createTeam(e,n,t,r){const o={participant:c.createParticipantContainer(e&&e.id),name:c.createNameContainer(),result:c.createResultContainer()};return null===e?o.name.innerText="BYE":this.renderParticipant(o,e,n,t,r),o.participant.append(o.name,o.result),e&&null!==e.id&&this.setupMouseHover(e.id,o.participant),o.participant}renderParticipant(e,n,t,r,o){const i=this.participants.find((e=>e.id===n.id));i?(e.name.innerText=i.name,this.renderTeamOrigin(e.name,n,r,o)):this.renderHint(e.name,n,t,r),e.result.innerText=`${n.score||"-"}`,c.setupWin(e.participant,e.result,n),c.setupLoss(e.participant,e.result,n)}renderHint(e,n,t,r){void 0!==t&&void 0!==n.position&&this.config.showSlotsOrigin&&(this.config.showLowerBracketSlotsOrigin||"loser-bracket"!==r)&&c.setupHint(e,t(n.position))}renderTeamOrigin(e,n,t,r){if(void 0===n.position||void 0===t)return;if(!this.config.participantOriginPlacement||"none"===this.config.participantOriginPlacement)return;if(!this.config.showSlotsOrigin)return;if(!this.config.showLowerBracketSlotsOrigin&&"loser-bracket"===t)return;const o=a.getOriginAbbreviation(t,this.skipFirstRound,r)+n.position;c.addTeamOrigin(e,o,this.config.participantOriginPlacement)}setupMouseHover(e,n){this.config.highlightParticipantOnHover&&(this.teamRefsDOM[e].push(n),n.addEventListener("mouseover",(()=>{this.teamRefsDOM[e].forEach((e=>e.classList.add("hover")))})),n.addEventListener("mouseleave",(()=>{this.teamRefsDOM[e].forEach((e=>e.classList.remove("hover")))})))}}n.BracketsViewer=d,window.bracketsViewer=new d},789:(e,n)=>{var t;Object.defineProperty(n,"__esModule",{value:!0}),n.Status=void 0,(t=n.Status||(n.Status={}))[t.Locked=0]="Locked",t[t.Waiting=1]="Waiting",t[t.Ready=2]="Ready",t[t.Running=3]="Running",t[t.Completed=4]="Completed",t[t.Archived=5]="Archived"},252:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(535),o=t.n(r),i=t(562),a=t.n(i)()(o());a.push([e.id,'*,::after,::before{box-sizing:border-box}.bracket-viewer{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";color:var(--font-color);background-color:var(--primary-background);text-align:left;display:flex;flex-direction:column;align-items:flex-start;width:max-content;margin:0 auto;user-select:none;--primary-background: #fff;--secondary-background: #eceff1;--font-color: #212529;--win-color: #50b649;--loss-color: #e61a1a;--label-color: grey;--hint-color: #a7a7a7;--connector-color: #9e9e9e;--border-color: #d9d9d9;--border-hover-color: #b6b5b5}h1,h2,h3{margin-bottom:.5rem;font-weight:500;line-height:1.2}h1{font-size:26px;margin-bottom:40px}h2{font-size:21px}h3{text-align:center;background:var(--secondary-background);font-size:16px;padding:10px}.round-robin{display:flex}.round-robin .group{text-align:center}.round-robin .group:not(:last-of-type){margin-right:50px}.round-robin .group h2{margin:0 0 25px 0}.round-robin .group table{margin:30px 0 20px 0;color:#a7a7a7;border-collapse:collapse}.round-robin .group th{font-weight:normal;text-align:start;cursor:help;border-bottom:1px solid var(--border-color)}.round-robin .group td.hover{background:#eceff1 !important}.round-robin .group th,.round-robin .group td{padding:5px}.round-robin .group td:nth-of-type(2),.round-robin .group td:last-of-type{color:#000;font-weight:500}.round-robin .round{width:fit-content;margin:0 auto}.bracket{flex:1;display:flex}.bracket:not(:last-of-type){margin-bottom:30px}.bracket .round{flex:1;display:flex;flex-direction:column}.bracket .round:not(:last-of-type){margin-right:50px}.match{flex:1;display:flex;align-items:center;margin:10px 0;width:192px;position:relative}.match.connect-next::after{content:"";display:block;position:absolute;right:-25px;width:25px;height:50%;border-right:2px solid var(--border-color)}.match.connect-next:nth-of-type(odd)::after{top:50%;border-top:2px solid var(--border-color)}.match.connect-next:nth-of-type(even)::after{top:0;border-bottom:2px solid var(--border-color)}.match.connect-next.straight::after{width:50px;right:-50px;top:0;border-bottom:2px solid var(--border-color);border-top:unset;border-right:unset}.opponents{width:100%;position:relative;border:1px solid var(--border-color);border-radius:.3rem}.opponents:hover{border:1px solid var(--border-hover-color)}.opponents>span{position:absolute;top:-10px;left:3px;font-size:.8rem;background:#fff;padding:0 5px;color:var(--label-color);border-radius:3px}.opponents.connect-previous::before{content:"";display:block;position:absolute;left:-25px;width:25px;height:50%;border-bottom:2px solid var(--border-color)}.opponents.connect-previous .bracket:nth-of-type(2) .opponents.connect-previous.straight::before,.bracket:nth-of-type(2) .opponents.connect-previous .opponents.connect-previous.straight::before,.opponents.connect-previous .bracket:nth-of-type(1) .opponents.connect-previous.straight::after,.bracket:nth-of-type(1) .opponents.connect-previous .opponents.connect-previous.straight::after{border-left:unset;left:-50px;width:50px}.bracket:nth-of-type(1) .opponents.connect-previous.straight::before{content:unset}.bracket:nth-of-type(2) .opponents.connect-previous.straight::after{content:unset}.participant{display:flex;justify-content:space-between;padding:2px 8px;background:var(--primary-background)}.participant.hover{background:var(--secondary-background) !important}.participant:nth-of-type(1){border-bottom:none;border-top-left-radius:.3rem;border-top-right-radius:.3rem;padding-top:8px}.participant:nth-of-type(2){border-top:none;border-bottom-left-radius:.3rem;border-bottom-right-radius:.3rem;padding-bottom:8px}.participant .name{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.participant .name.hint{color:var(--hint-color)}.participant .name>span{color:var(--hint-color);font-size:.9rem;font-weight:initial}.participant.win .name{font-weight:bold}.participant .result{margin-left:10px;width:15%;text-align:center}.participant.win .result{color:var(--win-color)}.participant.loss .result{color:var(--loss-color)}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AASA,mBAGE,qBAAA,CAGF,gBACE,sLAAA,CAIA,uBAAA,CACA,0CAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,iBAAA,CACA,aAAA,CACA,gBAAA,CAEA,0BAAA,CACA,+BAAA,CACA,qBAAA,CACA,oBAAA,CACA,qBAAA,CACA,mBAAA,CACA,qBAAA,CACA,0BAAA,CACA,uBAAA,CACA,6BAAA,CAGF,SAGE,mBAAA,CACA,eAAA,CACA,eAAA,CAGF,GACE,cAAA,CACA,kBAAA,CAGF,GACE,cAAA,CAGF,GACE,iBAAA,CACA,sCAAA,CACA,cAAA,CACA,YAAA,CAGF,aACE,YAAA,CAEA,oBACE,iBAAA,CAEA,uCACE,iBAzES,CA4EX,uBACE,iBAAA,CAGF,0BACE,oBAAA,CACA,aAAA,CACA,wBAAA,CAGF,uBACE,kBAAA,CACA,gBAAA,CACA,WAAA,CACA,2CApFU,CAuFZ,6BACI,6BAAA,CAGJ,8CAEE,WAAA,CAIA,0EAEE,UAAA,CACA,eAAA,CAKN,oBACE,iBAAA,CACA,aAAA,CAIJ,SACE,MAAA,CACA,YAAA,CAEA,4BACE,kBAAA,CAGF,gBACE,MAAA,CACA,YAAA,CACA,qBAAA,CAEA,mCACE,iBAnIS,CAwIf,OACE,MAAA,CACA,YAAA,CACA,kBAAA,CACA,aAAA,CACA,WA5IY,CA6IZ,iBAAA,CAGE,2BACE,UAAA,CACA,aAAA,CACA,iBAAA,CACA,WAAA,CACA,UAnJY,CAoJZ,UAAA,CACA,0CApJc,CAuJhB,4CACE,OAAA,CACA,wCAzJc,CA4JhB,6CACE,KAAA,CACA,2CA9Jc,CAiKhB,oCACE,UAtKS,CAuKT,WAAA,CACA,KAAA,CACA,2CArKc,CAsKd,gBAAA,CACA,kBAAA,CAKN,WACE,UAAA,CACA,iBAAA,CAEA,oCA9Kc,CA+Kd,mBA9KqB,CAgLrB,iBACE,0CAAA,CAGF,gBACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,eAAA,CACA,eAAA,CACA,aAAA,CACA,wBAAA,CACA,iBAAA,CAIA,oCACE,UAAA,CACA,aAAA,CACA,iBAAA,CACA,UAAA,CACA,UAzMY,CA0MZ,UAAA,CACA,2CA1Mc,CA6MhB,kYACE,iBAAA,CACA,UAAA,CACA,UApNS,CAuNX,qEACE,aAAA,CAWF,oEACE,aAAA,CAKN,aACE,YAAA,CACA,6BAAA,CACA,eAAA,CACA,oCAAA,CAEA,mBACE,iDAAA,CAGF,4BACE,kBAAA,CACA,4BA9OmB,CA+OnB,6BA/OmB,CAgPnB,eAAA,CAGF,4BACE,eAAA,CACA,+BArPmB,CAsPnB,gCAtPmB,CAuPnB,kBAAA,CAGF,mBACE,kBAAA,CACA,eAAA,CACA,sBAAA,CAEA,wBACE,uBAAA,CAGF,wBACE,uBAAA,CACA,eAAA,CACA,mBAAA,CAIJ,uBACE,gBAAA,CAGF,qBACE,gBAAA,CACA,SAAA,CACA,iBAAA,CAGF,yBACE,sBAAA,CAGF,0BACE,uBAAA",sourcesContent:['$round-margin: 50px;\r\n$match-width: 192px;\r\n\r\n$connector-width: $round-margin / 2;\r\n$connector-borders: 2px solid var(--border-color);\r\n\r\n$match-borders: 1px solid var(--border-color);\r\n$match-borders-radius: 0.3rem;\r\n\r\n*,\r\n::after,\r\n::before {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.bracket-viewer {\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,\r\n    "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji",\r\n    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\r\n\r\n  color: var(--font-color);\r\n  background-color: var(--primary-background);\r\n  text-align: left;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: max-content;\r\n  margin: 0 auto;\r\n  user-select: none;\r\n\r\n  --primary-background: #fff;\r\n  --secondary-background: #eceff1;\r\n  --font-color: #212529;\r\n  --win-color: #50b649;\r\n  --loss-color: #e61a1a;\r\n  --label-color: grey;\r\n  --hint-color: #a7a7a7;\r\n  --connector-color: #9e9e9e;\r\n  --border-color: #d9d9d9;\r\n  --border-hover-color: #b6b5b5;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3 {\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 500;\r\n  line-height: 1.2;\r\n}\r\n\r\nh1 {\r\n  font-size: 26px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\nh2 {\r\n  font-size: 21px;\r\n}\r\n\r\nh3 {\r\n  text-align: center;\r\n  background: var(--secondary-background);\r\n  font-size: 16px;\r\n  padding: 10px;\r\n}\r\n\r\n.round-robin {\r\n  display: flex;\r\n\r\n  .group {\r\n    text-align: center;\r\n\r\n    &:not(:last-of-type) {\r\n      margin-right: $round-margin;\r\n    }\r\n\r\n    h2 {\r\n      margin: 0 0 25px 0;\r\n    }\r\n\r\n    table {\r\n      margin: 30px 0 20px 0;\r\n      color: #a7a7a7;\r\n      border-collapse: collapse;\r\n    }\r\n\r\n    th {\r\n      font-weight: normal;\r\n      text-align: start;\r\n      cursor: help;\r\n      border-bottom: $match-borders;\r\n    }\r\n\r\n    td.hover {\r\n        background: #eceff1 !important;\r\n    }\r\n\r\n    th,\r\n    td {\r\n      padding: 5px;\r\n    }\r\n\r\n    td {\r\n      &:nth-of-type(2),\r\n      &:last-of-type {\r\n        color: black;\r\n        font-weight: 500;\r\n      }\r\n    }\r\n  }\r\n\r\n  .round {\r\n    width: fit-content;\r\n    margin: 0 auto;\r\n  }\r\n}\r\n\r\n.bracket {\r\n  flex: 1;\r\n  display: flex;\r\n\r\n  &:not(:last-of-type) {\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  .round {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    &:not(:last-of-type) {\r\n      margin-right: $round-margin;\r\n    }\r\n  }\r\n}\r\n\r\n.match {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 10px 0;\r\n  width: $match-width;\r\n  position: relative;\r\n\r\n  &.connect-next {\r\n    &::after {\r\n      content: "";\r\n      display: block;\r\n      position: absolute;\r\n      right: -$connector-width;\r\n      width: $connector-width;\r\n      height: 50%;\r\n      border-right: $connector-borders;\r\n    }\r\n\r\n    &:nth-of-type(odd)::after {\r\n      top: 50%;\r\n      border-top: $connector-borders;\r\n    }\r\n\r\n    &:nth-of-type(even)::after {\r\n      top: 0;\r\n      border-bottom: $connector-borders;\r\n    }\r\n\r\n    &.straight::after {\r\n      width: $round-margin;\r\n      right: -$round-margin;\r\n      top: 0;\r\n      border-bottom: $connector-borders;\r\n      border-top: unset;\r\n      border-right: unset;\r\n    }\r\n  }\r\n}\r\n\r\n.opponents {\r\n  width: 100%;\r\n  position: relative;\r\n\r\n  border: $match-borders;\r\n  border-radius: $match-borders-radius;\r\n\r\n  &:hover {\r\n    border: 1px solid var(--border-hover-color);\r\n  }\r\n\r\n  & > span {\r\n    position: absolute;\r\n    top: -10px;\r\n    left: 3px;\r\n    font-size: 0.8rem;\r\n    background: white;\r\n    padding: 0 5px;\r\n    color: var(--label-color);\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &.connect-previous {\r\n    &::before {\r\n      content: "";\r\n      display: block;\r\n      position: absolute;\r\n      left: -$connector-width;\r\n      width: $connector-width;\r\n      height: 50%;\r\n      border-bottom: $connector-borders;\r\n    }\r\n\r\n    %straight {\r\n      border-left: unset;\r\n      left: -$round-margin;\r\n      width: $round-margin;\r\n    }\r\n\r\n    .bracket:nth-of-type(1) &.straight::before {\r\n      content: unset;\r\n    }\r\n\r\n    .bracket:nth-of-type(1) &.straight::after {\r\n      @extend %straight;\r\n    }\r\n\r\n    .bracket:nth-of-type(2) &.straight::before {\r\n      @extend %straight;\r\n    }\r\n\r\n    .bracket:nth-of-type(2) &.straight::after {\r\n      content: unset;\r\n    }\r\n  }\r\n}\r\n\r\n.participant {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 2px 8px;\r\n  background: var(--primary-background);\r\n\r\n  &.hover {\r\n    background: var(--secondary-background) !important;\r\n  }\r\n\r\n  &:nth-of-type(1) {\r\n    border-bottom: none;\r\n    border-top-left-radius: $match-borders-radius;\r\n    border-top-right-radius: $match-borders-radius;\r\n    padding-top: 8px;\r\n  }\r\n\r\n  &:nth-of-type(2) {\r\n    border-top: none;\r\n    border-bottom-left-radius: $match-borders-radius;\r\n    border-bottom-right-radius: $match-borders-radius;\r\n    padding-bottom: 8px;\r\n  }\r\n\r\n  .name {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    &.hint {\r\n      color: var(--hint-color);\r\n    }\r\n\r\n    & > span {\r\n      color: var(--hint-color);\r\n      font-size: 0.9rem;\r\n      font-weight: initial;\r\n    }\r\n  }\r\n\r\n  &.win .name {\r\n    font-weight: bold;\r\n  }\r\n\r\n  .result {\r\n    margin-left: 10px;\r\n    width: 15%;\r\n    text-align: center;\r\n  }\r\n\r\n  &.win .result {\r\n    color: var(--win-color);\r\n  }\r\n\r\n  &.loss .result {\r\n    color: var(--loss-color);\r\n  }\r\n}'],sourceRoot:""}]);const c=a},562:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},535:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(t.push(a.value),!n||t.length!==n);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),d="/*# ".concat(s," */"),A=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(A).concat([d]).join("\n")}return[i].join("\n")}},651:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});var r=t(967),o=t.n(r),i=t(252);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},967:(e,n,t)=>{var r,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function a(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],o=0;o<e.length;o++){var c=e[o],s=n.base?c[0]+n.base:c[0],d=t[s]||0,A="".concat(s," ").concat(d);t[s]=d+1;var l=a(A),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==l?(i[l].references++,i[l].updater(u)):i.push({identifier:A,updater:h(u,n),references:1}),r.push(A)}return r}function s(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var d,A=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function l(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=A(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function u(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,f=0;function h(e,n){var t,r,o;if(n.singleton){var i=f++;t=p||(p=s(n)),r=l.bind(null,t,i,!1),o=l.bind(null,t,i,!0)}else t=s(n),r=u.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=a(t[r]);i[o].references--}for(var s=c(e,n),d=0;d<t.length;d++){var A=a(t[d]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}t=s}}}}},n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t(153)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,